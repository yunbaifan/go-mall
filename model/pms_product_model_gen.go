// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"math"

	"github.com/jinzhu/copier"
	"gorm.io/gorm"
)

var (
	_ sql.IsolationLevel
)

type (
	pmsProductModel interface {
		Insert(ctx context.Context, data *PmsProduct) error
		FindOne(ctx context.Context, id int64, preloadList ...string) (*PmsProduct, error)
		OrmSession(ctx context.Context) *gorm.DB
		Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error
		FindPageListByBuilder(ormSession *gorm.DB, page, pageSize int64) (*PmsProductPagination, error)
		Update(ctx context.Context, data *PmsProduct) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPmsProductModel struct {
		table   string
		ormConn *gorm.DB
	}

	PmsProduct struct {
		Id                         int64           `json:"id" gorm:"primary_key"`
		BrandId                    sql.NullInt64   `json:"brand_id"`
		ProductCategoryId          sql.NullInt64   `json:"product_category_id"`
		FeightTemplateId           sql.NullInt64   `json:"feight_template_id"`
		ProductAttributeCategoryId sql.NullInt64   `json:"product_attribute_category_id"`
		Name                       string          `json:"name"`
		Pic                        sql.NullString  `json:"pic"`
		ProductSn                  string          `json:"product_sn"`       // 货号
		DeleteStatus               sql.NullInt64   `json:"delete_status"`    // 删除状态：0->未删除；1->已删除
		PublishStatus              sql.NullInt64   `json:"publish_status"`   // 上架状态：0->下架；1->上架
		NewStatus                  sql.NullInt64   `json:"new_status"`       // 新品状态:0->不是新品；1->新品
		RecommandStatus            sql.NullInt64   `json:"recommand_status"` // 推荐状态；0->不推荐；1->推荐
		VerifyStatus               sql.NullInt64   `json:"verify_status"`    // 审核状态：0->未审核；1->审核通过
		Sort                       sql.NullInt64   `json:"sort"`             // 排序
		Sale                       sql.NullInt64   `json:"sale"`             // 销量
		Price                      sql.NullFloat64 `json:"price"`
		PromotionPrice             sql.NullFloat64 `json:"promotion_price"` // 促销价格
		GiftGrowth                 int64           `json:"gift_growth"`     // 赠送的成长值
		GiftPoint                  int64           `json:"gift_point"`      // 赠送的积分
		UsePointLimit              sql.NullInt64   `json:"use_point_limit"` // 限制使用的积分数
		SubTitle                   sql.NullString  `json:"sub_title"`       // 副标题
		Description                sql.NullString  `json:"description"`     // 商品描述
		OriginalPrice              sql.NullFloat64 `json:"original_price"`  // 市场价
		Stock                      sql.NullInt64   `json:"stock"`           // 库存
		LowStock                   sql.NullInt64   `json:"low_stock"`       // 库存预警值
		Unit                       sql.NullString  `json:"unit"`            // 单位
		Weight                     sql.NullFloat64 `json:"weight"`          // 商品重量，默认为克
		PreviewStatus              sql.NullInt64   `json:"preview_status"`  // 是否为预告商品：0->不是；1->是
		ServiceIds                 sql.NullString  `json:"service_ids"`     // 以逗号分割的产品服务：1->无忧退货；2->快速退款；3->免费包邮
		Keywords                   sql.NullString  `json:"keywords"`
		Note                       sql.NullString  `json:"note"`
		AlbumPics                  sql.NullString  `json:"album_pics"` // 画册图片，连产品图片限制为5张，以逗号分割
		DetailTitle                sql.NullString  `json:"detail_title"`
		DetailDesc                 sql.NullString  `json:"detail_desc"`
		DetailHtml                 sql.NullString  `json:"detail_html"`           // 产品详情网页内容
		DetailMobileHtml           sql.NullString  `json:"detail_mobile_html"`    // 移动端网页详情
		PromotionStartTime         sql.NullTime    `json:"promotion_start_time"`  // 促销开始时间
		PromotionEndTime           sql.NullTime    `json:"promotion_end_time"`    // 促销结束时间
		PromotionPerLimit          sql.NullInt64   `json:"promotion_per_limit"`   // 活动限购数量
		PromotionType              sql.NullInt64   `json:"promotion_type"`        // 促销类型：0->没有促销使用原价;1->使用促销价；2->使用会员价；3->使用阶梯价格；4->使用满减价格；5->限时购
		BrandName                  sql.NullString  `json:"brand_name"`            // 品牌名称
		ProductCategoryName        sql.NullString  `json:"product_category_name"` // 商品分类名称
		PmsProductRelation
	}

	PmsProductPagination struct {
		Data []*PmsProduct
		PmsProductPaginationBasic
	}

	PmsProductPaginationBasic struct {
		CurrentPage int64
		PageSize    int64
		TotalCount  int64
		TotalPage   int64
	}
)

func newPmsProductModel(db *gorm.DB) *defaultPmsProductModel {
	return &defaultPmsProductModel{
		table:   "`pms_product`",
		ormConn: db,
	}
}

func (PmsProduct) TableName() string {
	return "`pms_product`"
}

func (m PmsProduct) ToProto(toValue interface{}) error {
	return copier.Copy(toValue, &m)
}

func (m *defaultPmsProductModel) Delete(ctx context.Context, id int64) error {
	return m.OrmSession(ctx).Delete(&PmsProduct{}, id).Error
}

func (m *defaultPmsProductModel) FindOne(ctx context.Context, id int64, preloadList ...string) (*PmsProduct, error) {
	var mm PmsProduct
	db := m.OrmSession(ctx)
	for _, preload := range preloadList {
		db = db.Preload(preload)
	}
	err := db.First(&mm, id).Error
	switch err {
	case nil:
		return &mm, nil
	case gorm.ErrRecordNotFound:
		return nil, gorm.ErrRecordNotFound
	default:
		return nil, err
	}
}

func (m *defaultPmsProductModel) OrmSession(ctx context.Context) *gorm.DB {
	return m.ormConn.Model(&PmsProduct{}).WithContext(ctx)
}

func (m *defaultPmsProductModel) Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error {
	return m.ormConn.WithContext(ctx).Transaction(fc, opts...)
}

func (m *defaultPmsProductModel) FindPageListByBuilder(db *gorm.DB, page, pageSize int64) (*PmsProductPagination, error) {
	// 总行数
	var totalCount int64
	if err := db.Count(&totalCount).Error; err != nil {
		return nil, err
	}
	// 总页数
	totalPage := int64(math.Ceil(float64(totalCount) / float64(pageSize)))

	resp := new(PmsProductPagination)
	resp.PageSize = pageSize
	resp.TotalPage = totalPage
	resp.CurrentPage = page
	resp.TotalCount = totalCount

	// 没有数据则返回空数据
	if totalCount <= 0 {
		return resp, nil
	}
	// 当前页数没有数据也返回空数据
	if totalCount < ((page - 1) * pageSize) {
		return resp, nil
	}

	offset := int((page - 1) * pageSize)
	if err := db.Offset(offset).Limit(int(pageSize)).Find(&resp.Data).Error; err != nil {
		return nil, err
	}

	return resp, nil
}

func (m PmsProductPagination) Pagination() PmsProductPaginationBasic {
	return PmsProductPaginationBasic{
		CurrentPage: m.CurrentPage,
		PageSize:    m.PageSize,
		TotalPage:   m.TotalPage,
		TotalCount:  m.TotalCount,
	}
}

func (m PmsProductPagination) ToProto(to any, toData any, toPagination any) error {
	if to != nil {
		if err := copier.CopyWithOption(to, m, copier.Option{}); err != nil {
			return err
		}
	}
	if toData != nil {
		if err := copier.Copy(toData, m.Data); err != nil {
			return err
		}
	}
	if toPagination != nil {
		if err := copier.Copy(toPagination, m.Pagination()); err != nil {
			return err
		}
	}
	return nil
}

func (m *defaultPmsProductModel) Insert(ctx context.Context, data *PmsProduct) error {
	return m.OrmSession(ctx).Create(data).Error
}

func (m *defaultPmsProductModel) Update(ctx context.Context, data *PmsProduct) error {
	if data.Id <= 0 {
		return gorm.ErrMissingWhereClause
	}
	return m.OrmSession(ctx).Where("id = ?", data.Id).Save(data).Error
}
