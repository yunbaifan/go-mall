// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"math"

	"fmt"
	"github.com/jinzhu/copier"
	"gorm.io/gorm"
)

var (
	_ sql.IsolationLevel
)

type (
	cmsHelpModel interface {
		Insert(ctx context.Context, data *CmsHelp) error
		FindOne(ctx context.Context, id int64, preloadList ...string) (*CmsHelp, error)
		OrmSession(ctx context.Context) *gorm.DB
		Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error
		FindPageListByBuilder(ctx context.Context, keyword *KeywordCmsHelpModel) (*CmsHelpPagination, error)
		Update(ctx context.Context, data *CmsHelp) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCmsHelpModel struct {
		table   string
		ormConn *gorm.DB
	}

	CmsHelp struct {
		Id         int64          `json:"id" gorm:"primary_key"`
		CategoryId sql.NullInt64  `json:"category_id"`
		Icon       sql.NullString `json:"icon"`
		Title      sql.NullString `json:"title"`
		ShowStatus sql.NullInt64  `json:"show_status"`
		CreateTime sql.NullTime   `json:"create_time"`
		ReadCount  sql.NullInt64  `json:"read_count"`
		Content    sql.NullString `json:"content"`
		CmsHelpRelation
	}

	CmsHelpPagination struct {
		Data []*CmsHelp
		CmsHelpPaginationBasic
	}

	CmsHelpPaginationBasic struct {
		CurrentPage int64
		PageSize    int64
		TotalCount  int64
		TotalPage   int64
	}

	KeywordCmsHelpModel struct {
		KeywordKey     string //like 关键字
		KeywordValue   string //like 值
		Page, PageSize int64
	}
)

func newCmsHelpModel(db *gorm.DB) *defaultCmsHelpModel {
	return &defaultCmsHelpModel{
		table:   "`cms_help`",
		ormConn: db,
	}
}

func (CmsHelp) TableName() string {
	return "`cms_help`"
}

func (m CmsHelp) ToProto(toValue interface{}) error {
	return copier.Copy(toValue, &m)
}

func (m *defaultCmsHelpModel) Delete(ctx context.Context, id int64) error {
	return m.OrmSession(ctx).Delete(&CmsHelp{}, id).Error
}

func (m *defaultCmsHelpModel) FindOne(ctx context.Context, id int64, preloadList ...string) (*CmsHelp, error) {
	var mm CmsHelp
	db := m.OrmSession(ctx)
	for _, preload := range preloadList {
		db = db.Preload(preload)
	}
	err := db.First(&mm, id).Error
	switch err {
	case nil:
		return &mm, nil
	case gorm.ErrRecordNotFound:
		return nil, gorm.ErrRecordNotFound
	default:
		return nil, err
	}
}

func (m *defaultCmsHelpModel) OrmSession(ctx context.Context) *gorm.DB {
	return m.ormConn.Model(&CmsHelp{}).WithContext(ctx)
}

func (m *defaultCmsHelpModel) Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error {
	return m.ormConn.WithContext(ctx).Transaction(fc, opts...)
}

func (m *defaultCmsHelpModel) FindPageListByBuilder(ctx context.Context, keyword *KeywordCmsHelpModel) (*CmsHelpPagination, error) {
	page := keyword.Page
	pageSize := keyword.PageSize
	// 总行数
	var totalCount int64
	db := m.OrmSession(ctx)
	if err := db.Count(&totalCount).Error; err != nil {
		return nil, err
	}
	// 总页数
	totalPage := int64(math.Ceil(float64(totalCount) / float64(pageSize)))

	resp := new(CmsHelpPagination)
	resp.PageSize = pageSize
	resp.TotalPage = totalPage
	resp.CurrentPage = page
	resp.TotalCount = totalCount

	// 没有数据则返回空数据
	if totalCount <= 0 {
		return resp, nil
	}
	// 当前页数没有数据也返回空数据
	if totalCount < ((page - 1) * pageSize) {
		return resp, nil
	}
	if keyword.KeywordKey != "" && keyword.KeywordValue != "" {
		db = db.Where(fmt.Sprintf("%s = ?", keyword.KeywordKey), keyword.KeywordValue)
	}
	offset := int((page - 1) * pageSize)
	if err := db.Offset(offset).Limit(int(pageSize)).Find(&resp.Data).Error; err != nil {
		return nil, err
	}

	return resp, nil
}

func (m CmsHelpPagination) Pagination() CmsHelpPaginationBasic {
	return CmsHelpPaginationBasic{
		CurrentPage: m.CurrentPage,
		PageSize:    m.PageSize,
		TotalPage:   m.TotalPage,
		TotalCount:  m.TotalCount,
	}
}

func (m CmsHelpPagination) ToProto(to any, toData any, toPagination any) error {
	if to != nil {
		if err := copier.CopyWithOption(to, m, copier.Option{}); err != nil {
			return err
		}
	}
	if toData != nil {
		if err := copier.Copy(toData, m.Data); err != nil {
			return err
		}
	}
	if toPagination != nil {
		if err := copier.Copy(toPagination, m.Pagination()); err != nil {
			return err
		}
	}
	return nil
}

func (m *defaultCmsHelpModel) Insert(ctx context.Context, data *CmsHelp) error {
	return m.OrmSession(ctx).Create(data).Error
}

func (m *defaultCmsHelpModel) Update(ctx context.Context, data *CmsHelp) error {
	if data.Id <= 0 {
		return gorm.ErrMissingWhereClause
	}
	return m.OrmSession(ctx).Where("id = ?", data.Id).Save(data).Error
}
