// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"math"

	"fmt"
	"github.com/jinzhu/copier"
	"gorm.io/gorm"
)

var (
	_ sql.IsolationLevel
)

type (
	omsOrderReturnApplyModel interface {
		Insert(ctx context.Context, data *OmsOrderReturnApply) error
		FindOne(ctx context.Context, id int64, preloadList ...string) (*OmsOrderReturnApply, error)
		OrmSession(ctx context.Context) *gorm.DB
		Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error
		FindPageListByBuilder(ormSession *gorm.DB, keyword *KeywordOmsOrderReturnApplyModel) (*OmsOrderReturnApplyPagination, error)
		Update(ctx context.Context, data *OmsOrderReturnApply) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOmsOrderReturnApplyModel struct {
		table   string
		ormConn *gorm.DB
	}

	OmsOrderReturnApply struct {
		Id               int64           `json:"id" gorm:"primary_key"`
		OrderId          sql.NullInt64   `json:"order_id"`           // 订单id
		CompanyAddressId sql.NullInt64   `json:"company_address_id"` // 收货地址表id
		ProductId        sql.NullInt64   `json:"product_id"`         // 退货商品id
		OrderSn          sql.NullString  `json:"order_sn"`           // 订单编号
		CreateTime       sql.NullTime    `json:"create_time"`        // 申请时间
		MemberUsername   sql.NullString  `json:"member_username"`    // 会员用户名
		ReturnAmount     sql.NullFloat64 `json:"return_amount"`      // 退款金额
		ReturnName       sql.NullString  `json:"return_name"`        // 退货人姓名
		ReturnPhone      sql.NullString  `json:"return_phone"`       // 退货人电话
		Status           sql.NullInt64   `json:"status"`             // 申请状态：0->待处理；1->退货中；2->已完成；3->已拒绝
		HandleTime       sql.NullTime    `json:"handle_time"`        // 处理时间
		ProductPic       sql.NullString  `json:"product_pic"`        // 商品图片
		ProductName      sql.NullString  `json:"product_name"`       // 商品名称
		ProductBrand     sql.NullString  `json:"product_brand"`      // 商品品牌
		ProductAttr      sql.NullString  `json:"product_attr"`       // 商品销售属性：颜色：红色；尺码：xl;
		ProductCount     sql.NullInt64   `json:"product_count"`      // 退货数量
		ProductPrice     sql.NullFloat64 `json:"product_price"`      // 商品单价
		ProductRealPrice sql.NullFloat64 `json:"product_real_price"` // 商品实际支付单价
		Reason           sql.NullString  `json:"reason"`             // 原因
		Description      sql.NullString  `json:"description"`        // 描述
		ProofPics        sql.NullString  `json:"proof_pics"`         // 凭证图片，以逗号隔开
		HandleNote       sql.NullString  `json:"handle_note"`        // 处理备注
		HandleMan        sql.NullString  `json:"handle_man"`         // 处理人员
		ReceiveMan       sql.NullString  `json:"receive_man"`        // 收货人
		ReceiveTime      sql.NullTime    `json:"receive_time"`       // 收货时间
		ReceiveNote      sql.NullString  `json:"receive_note"`       // 收货备注
		OmsOrderReturnApplyRelation
	}

	OmsOrderReturnApplyPagination struct {
		Data []*OmsOrderReturnApply
		OmsOrderReturnApplyPaginationBasic
	}

	OmsOrderReturnApplyPaginationBasic struct {
		CurrentPage int64
		PageSize    int64
		TotalCount  int64
		TotalPage   int64
	}

	KeywordOmsOrderReturnApplyModel struct {
		KeywordKey     string //like 关键字
		KeywordValue   string //like 值
		Page, PageSize int64
	}
)

func newOmsOrderReturnApplyModel(db *gorm.DB) *defaultOmsOrderReturnApplyModel {
	return &defaultOmsOrderReturnApplyModel{
		table:   "`oms_order_return_apply`",
		ormConn: db,
	}
}

func (OmsOrderReturnApply) TableName() string {
	return "`oms_order_return_apply`"
}

func (m OmsOrderReturnApply) ToProto(toValue interface{}) error {
	return copier.Copy(toValue, &m)
}

func (m *defaultOmsOrderReturnApplyModel) Delete(ctx context.Context, id int64) error {
	return m.OrmSession(ctx).Delete(&OmsOrderReturnApply{}, id).Error
}

func (m *defaultOmsOrderReturnApplyModel) FindOne(ctx context.Context, id int64, preloadList ...string) (*OmsOrderReturnApply, error) {
	var mm OmsOrderReturnApply
	db := m.OrmSession(ctx)
	for _, preload := range preloadList {
		db = db.Preload(preload)
	}
	err := db.First(&mm, id).Error
	switch err {
	case nil:
		return &mm, nil
	case gorm.ErrRecordNotFound:
		return nil, gorm.ErrRecordNotFound
	default:
		return nil, err
	}
}

func (m *defaultOmsOrderReturnApplyModel) OrmSession(ctx context.Context) *gorm.DB {
	return m.ormConn.Model(&OmsOrderReturnApply{}).WithContext(ctx)
}

func (m *defaultOmsOrderReturnApplyModel) Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error {
	return m.ormConn.WithContext(ctx).Transaction(fc, opts...)
}

func (m *defaultOmsOrderReturnApplyModel) FindPageListByBuilder(db *gorm.DB, keyword *KeywordOmsOrderReturnApplyModel) (*OmsOrderReturnApplyPagination, error) {
	page := keyword.Page
	pageSize := keyword.PageSize
	// 总行数
	var totalCount int64
	if err := db.Count(&totalCount).Error; err != nil {
		return nil, err
	}
	// 总页数
	totalPage := int64(math.Ceil(float64(totalCount) / float64(pageSize)))

	resp := new(OmsOrderReturnApplyPagination)
	resp.PageSize = pageSize
	resp.TotalPage = totalPage
	resp.CurrentPage = page
	resp.TotalCount = totalCount

	// 没有数据则返回空数据
	if totalCount <= 0 {
		return resp, nil
	}
	// 当前页数没有数据也返回空数据
	if totalCount < ((page - 1) * pageSize) {
		return resp, nil
	}
	if keyword.KeywordKey != "" && keyword.KeywordValue != "" {
		db = db.Where(fmt.Sprintf("%s = ?", keyword.KeywordKey), keyword.KeywordValue)
	}
	offset := int((page - 1) * pageSize)
	if err := db.Offset(offset).Limit(int(pageSize)).Find(&resp.Data).Error; err != nil {
		return nil, err
	}

	return resp, nil
}

func (m OmsOrderReturnApplyPagination) Pagination() OmsOrderReturnApplyPaginationBasic {
	return OmsOrderReturnApplyPaginationBasic{
		CurrentPage: m.CurrentPage,
		PageSize:    m.PageSize,
		TotalPage:   m.TotalPage,
		TotalCount:  m.TotalCount,
	}
}

func (m OmsOrderReturnApplyPagination) ToProto(to any, toData any, toPagination any) error {
	if to != nil {
		if err := copier.CopyWithOption(to, m, copier.Option{}); err != nil {
			return err
		}
	}
	if toData != nil {
		if err := copier.Copy(toData, m.Data); err != nil {
			return err
		}
	}
	if toPagination != nil {
		if err := copier.Copy(toPagination, m.Pagination()); err != nil {
			return err
		}
	}
	return nil
}

func (m *defaultOmsOrderReturnApplyModel) Insert(ctx context.Context, data *OmsOrderReturnApply) error {
	return m.OrmSession(ctx).Create(data).Error
}

func (m *defaultOmsOrderReturnApplyModel) Update(ctx context.Context, data *OmsOrderReturnApply) error {
	if data.Id <= 0 {
		return gorm.ErrMissingWhereClause
	}
	return m.OrmSession(ctx).Where("id = ?", data.Id).Save(data).Error
}
