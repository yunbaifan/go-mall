// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"math"

	"github.com/jinzhu/copier"
	"gorm.io/gorm"
)

var (
	_ sql.IsolationLevel
)

type (
	omsOrderModel interface {
		Insert(ctx context.Context, data *OmsOrder) error
		FindOne(ctx context.Context, id int64, preloadList ...string) (*OmsOrder, error)
		OrmSession(ctx context.Context) *gorm.DB
		Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error
		FindPageListByBuilder(ormSession *gorm.DB, keyword *KeywordOmsOrderModel) (*OmsOrderPagination, error)
		Update(ctx context.Context, data *OmsOrder) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOmsOrderModel struct {
		table   string
		ormConn *gorm.DB
	}

	OmsOrder struct {
		Id                    int64           `json:"id" gorm:"primary_key"` // 订单id
		MemberId              int64           `json:"member_id"`
		CouponId              sql.NullInt64   `json:"coupon_id"`
		OrderSn               sql.NullString  `json:"order_sn"`                // 订单编号
		CreateTime            sql.NullTime    `json:"create_time"`             // 提交时间
		MemberUsername        sql.NullString  `json:"member_username"`         // 用户帐号
		TotalAmount           sql.NullFloat64 `json:"total_amount"`            // 订单总金额
		PayAmount             sql.NullFloat64 `json:"pay_amount"`              // 应付金额（实际支付金额）
		FreightAmount         sql.NullFloat64 `json:"freight_amount"`          // 运费金额
		PromotionAmount       sql.NullFloat64 `json:"promotion_amount"`        // 促销优化金额（促销价、满减、阶梯价）
		IntegrationAmount     sql.NullFloat64 `json:"integration_amount"`      // 积分抵扣金额
		CouponAmount          sql.NullFloat64 `json:"coupon_amount"`           // 优惠券抵扣金额
		DiscountAmount        sql.NullFloat64 `json:"discount_amount"`         // 管理员后台调整订单使用的折扣金额
		PayType               sql.NullInt64   `json:"pay_type"`                // 支付方式：0->未支付；1->支付宝；2->微信
		SourceType            sql.NullInt64   `json:"source_type"`             // 订单来源：0->PC订单；1->app订单
		Status                sql.NullInt64   `json:"status"`                  // 订单状态：0->待付款；1->待发货；2->已发货；3->已完成；4->已关闭；5->无效订单
		OrderType             sql.NullInt64   `json:"order_type"`              // 订单类型：0->正常订单；1->秒杀订单
		DeliveryCompany       sql.NullString  `json:"delivery_company"`        // 物流公司(配送方式)
		DeliverySn            sql.NullString  `json:"delivery_sn"`             // 物流单号
		AutoConfirmDay        sql.NullInt64   `json:"auto_confirm_day"`        // 自动确认时间（天）
		Integration           sql.NullInt64   `json:"integration"`             // 可以获得的积分
		Growth                sql.NullInt64   `json:"growth"`                  // 可以活动的成长值
		PromotionInfo         sql.NullString  `json:"promotion_info"`          // 活动信息
		BillType              sql.NullInt64   `json:"bill_type"`               // 发票类型：0->不开发票；1->电子发票；2->纸质发票
		BillHeader            sql.NullString  `json:"bill_header"`             // 发票抬头
		BillContent           sql.NullString  `json:"bill_content"`            // 发票内容
		BillReceiverPhone     sql.NullString  `json:"bill_receiver_phone"`     // 收票人电话
		BillReceiverEmail     sql.NullString  `json:"bill_receiver_email"`     // 收票人邮箱
		ReceiverName          string          `json:"receiver_name"`           // 收货人姓名
		ReceiverPhone         string          `json:"receiver_phone"`          // 收货人电话
		ReceiverPostCode      sql.NullString  `json:"receiver_post_code"`      // 收货人邮编
		ReceiverProvince      sql.NullString  `json:"receiver_province"`       // 省份/直辖市
		ReceiverCity          sql.NullString  `json:"receiver_city"`           // 城市
		ReceiverRegion        sql.NullString  `json:"receiver_region"`         // 区
		ReceiverDetailAddress sql.NullString  `json:"receiver_detail_address"` // 详细地址
		Note                  sql.NullString  `json:"note"`                    // 订单备注
		ConfirmStatus         sql.NullInt64   `json:"confirm_status"`          // 确认收货状态：0->未确认；1->已确认
		DeleteStatus          int64           `json:"delete_status"`           // 删除状态：0->未删除；1->已删除
		UseIntegration        sql.NullInt64   `json:"use_integration"`         // 下单时使用的积分
		PaymentTime           sql.NullTime    `json:"payment_time"`            // 支付时间
		DeliveryTime          sql.NullTime    `json:"delivery_time"`           // 发货时间
		ReceiveTime           sql.NullTime    `json:"receive_time"`            // 确认收货时间
		CommentTime           sql.NullTime    `json:"comment_time"`            // 评价时间
		ModifyTime            sql.NullTime    `json:"modify_time"`             // 修改时间
		OmsOrderRelation
	}

	OmsOrderPagination struct {
		Data []*OmsOrder
		OmsOrderPaginationBasic
	}

	OmsOrderPaginationBasic struct {
		CurrentPage int64
		PageSize    int64
		TotalCount  int64
		TotalPage   int64
	}

	KeywordOmsOrderModel struct {
		KeywordKey     string //like 关键字
		KeywordValue   string //like 值
		Page, PageSize int64
	}
)

func newOmsOrderModel(db *gorm.DB) *defaultOmsOrderModel {
	return &defaultOmsOrderModel{
		table:   "`oms_order`",
		ormConn: db,
	}
}

func (OmsOrder) TableName() string {
	return "`oms_order`"
}

func (m OmsOrder) ToProto(toValue interface{}) error {
	return copier.Copy(toValue, &m)
}

func (m *defaultOmsOrderModel) Delete(ctx context.Context, id int64) error {
	return m.OrmSession(ctx).Delete(&OmsOrder{}, id).Error
}

func (m *defaultOmsOrderModel) FindOne(ctx context.Context, id int64, preloadList ...string) (*OmsOrder, error) {
	var mm OmsOrder
	db := m.OrmSession(ctx)
	for _, preload := range preloadList {
		db = db.Preload(preload)
	}
	err := db.First(&mm, id).Error
	switch err {
	case nil:
		return &mm, nil
	case gorm.ErrRecordNotFound:
		return nil, gorm.ErrRecordNotFound
	default:
		return nil, err
	}
}

func (m *defaultOmsOrderModel) OrmSession(ctx context.Context) *gorm.DB {
	return m.ormConn.Model(&OmsOrder{}).WithContext(ctx)
}

func (m *defaultOmsOrderModel) Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error {
	return m.ormConn.WithContext(ctx).Transaction(fc, opts...)
}

func (m *defaultOmsOrderModel) FindPageListByBuilder(db *gorm.DB, keyword *KeywordOmsOrderModel) (*OmsOrderPagination, error) {
	page := keyword.Page
	pageSize := keyword.PageSize
	// 总行数
	var totalCount int64
	if err := db.Count(&totalCount).Error; err != nil {
		return nil, err
	}
	// 总页数
	totalPage := int64(math.Ceil(float64(totalCount) / float64(pageSize)))

	resp := new(OmsOrderPagination)
	resp.PageSize = pageSize
	resp.TotalPage = totalPage
	resp.CurrentPage = page
	resp.TotalCount = totalCount

	// 没有数据则返回空数据
	if totalCount <= 0 {
		return resp, nil
	}
	// 当前页数没有数据也返回空数据
	if totalCount < ((page - 1) * pageSize) {
		return resp, nil
	}
	if keyword.KeywordKey != "" && keyword.KeywordValue != "" {
		db = db.Where(fmt.Sprintf("%s = ?", keyword.KeywordKey), keyword.KeywordValue)
	}
	offset := int((page - 1) * pageSize)
	if err := db.Offset(offset).Limit(int(pageSize)).Find(&resp.Data).Error; err != nil {
		return nil, err
	}

	return resp, nil
}

func (m OmsOrderPagination) Pagination() OmsOrderPaginationBasic {
	return OmsOrderPaginationBasic{
		CurrentPage: m.CurrentPage,
		PageSize:    m.PageSize,
		TotalPage:   m.TotalPage,
		TotalCount:  m.TotalCount,
	}
}

func (m OmsOrderPagination) ToProto(to any, toData any, toPagination any) error {
	if to != nil {
		if err := copier.CopyWithOption(to, m, copier.Option{}); err != nil {
			return err
		}
	}
	if toData != nil {
		if err := copier.Copy(toData, m.Data); err != nil {
			return err
		}
	}
	if toPagination != nil {
		if err := copier.Copy(toPagination, m.Pagination()); err != nil {
			return err
		}
	}
	return nil
}

func (m *defaultOmsOrderModel) Insert(ctx context.Context, data *OmsOrder) error {
	return m.OrmSession(ctx).Create(data).Error
}

func (m *defaultOmsOrderModel) Update(ctx context.Context, data *OmsOrder) error {
	if data.Id <= 0 {
		return gorm.ErrMissingWhereClause
	}
	return m.OrmSession(ctx).Where("id = ?", data.Id).Save(data).Error
}
