// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"math"

	"github.com/jinzhu/copier"
	"gorm.io/gorm"
)

var (
	_ sql.IsolationLevel
)

type (
	smsCouponModel interface {
		Insert(ctx context.Context, data *SmsCoupon) error
		FindOne(ctx context.Context, id int64, preloadList ...string) (*SmsCoupon, error)
		OrmSession(ctx context.Context) *gorm.DB
		Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error
		FindPageListByBuilder(ormSession *gorm.DB, keyword *KeywordSmsCouponModel) (*SmsCouponPagination, error)
		Update(ctx context.Context, data *SmsCoupon) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSmsCouponModel struct {
		table   string
		ormConn *gorm.DB
	}

	SmsCoupon struct {
		Id           int64           `json:"id" gorm:"primary_key"`
		Type         sql.NullInt64   `json:"type"` // 优惠券类型；0->全场赠券；1->会员赠券；2->购物赠券；3->注册赠券
		Name         sql.NullString  `json:"name"`
		Platform     sql.NullInt64   `json:"platform"`  // 使用平台：0->全部；1->移动；2->PC
		Count        sql.NullInt64   `json:"count"`     // 数量
		Amount       sql.NullFloat64 `json:"amount"`    // 金额
		PerLimit     sql.NullInt64   `json:"per_limit"` // 每人限领张数
		MinPoint     sql.NullFloat64 `json:"min_point"` // 使用门槛；0表示无门槛
		StartTime    sql.NullTime    `json:"start_time"`
		EndTime      sql.NullTime    `json:"end_time"`
		UseType      sql.NullInt64   `json:"use_type"`      // 使用类型：0->全场通用；1->指定分类；2->指定商品
		Note         sql.NullString  `json:"note"`          // 备注
		PublishCount sql.NullInt64   `json:"publish_count"` // 发行数量
		UseCount     sql.NullInt64   `json:"use_count"`     // 已使用数量
		ReceiveCount sql.NullInt64   `json:"receive_count"` // 领取数量
		EnableTime   sql.NullTime    `json:"enable_time"`   // 可以领取的日期
		Code         sql.NullString  `json:"code"`          // 优惠码
		MemberLevel  sql.NullInt64   `json:"member_level"`  // 可领取的会员类型：0->无限时
		SmsCouponRelation
	}

	SmsCouponPagination struct {
		Data []*SmsCoupon
		SmsCouponPaginationBasic
	}

	SmsCouponPaginationBasic struct {
		CurrentPage int64
		PageSize    int64
		TotalCount  int64
		TotalPage   int64
	}

	KeywordSmsCouponModel struct {
		KeywordKey     string //like 关键字
		KeywordValue   string //like 值
		Page, PageSize int64
	}
)

func newSmsCouponModel(db *gorm.DB) *defaultSmsCouponModel {
	return &defaultSmsCouponModel{
		table:   "`sms_coupon`",
		ormConn: db,
	}
}

func (SmsCoupon) TableName() string {
	return "`sms_coupon`"
}

func (m SmsCoupon) ToProto(toValue interface{}) error {
	return copier.Copy(toValue, &m)
}

func (m *defaultSmsCouponModel) Delete(ctx context.Context, id int64) error {
	return m.OrmSession(ctx).Delete(&SmsCoupon{}, id).Error
}

func (m *defaultSmsCouponModel) FindOne(ctx context.Context, id int64, preloadList ...string) (*SmsCoupon, error) {
	var mm SmsCoupon
	db := m.OrmSession(ctx)
	for _, preload := range preloadList {
		db = db.Preload(preload)
	}
	err := db.First(&mm, id).Error
	switch err {
	case nil:
		return &mm, nil
	case gorm.ErrRecordNotFound:
		return nil, gorm.ErrRecordNotFound
	default:
		return nil, err
	}
}

func (m *defaultSmsCouponModel) OrmSession(ctx context.Context) *gorm.DB {
	return m.ormConn.Model(&SmsCoupon{}).WithContext(ctx)
}

func (m *defaultSmsCouponModel) Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error {
	return m.ormConn.WithContext(ctx).Transaction(fc, opts...)
}

func (m *defaultSmsCouponModel) FindPageListByBuilder(db *gorm.DB, keyword *KeywordSmsCouponModel) (*SmsCouponPagination, error) {
	page := keyword.Page
	pageSize := keyword.PageSize
	// 总行数
	var totalCount int64
	if err := db.Count(&totalCount).Error; err != nil {
		return nil, err
	}
	// 总页数
	totalPage := int64(math.Ceil(float64(totalCount) / float64(pageSize)))

	resp := new(SmsCouponPagination)
	resp.PageSize = pageSize
	resp.TotalPage = totalPage
	resp.CurrentPage = page
	resp.TotalCount = totalCount

	// 没有数据则返回空数据
	if totalCount <= 0 {
		return resp, nil
	}
	// 当前页数没有数据也返回空数据
	if totalCount < ((page - 1) * pageSize) {
		return resp, nil
	}
	if keyword.KeywordKey != "" && keyword.KeywordValue != "" {
		db = db.Where(fmt.Sprintf("%s = ?", keyword.KeywordKey), keyword.KeywordValue)
	}
	offset := int((page - 1) * pageSize)
	if err := db.Offset(offset).Limit(int(pageSize)).Find(&resp.Data).Error; err != nil {
		return nil, err
	}

	return resp, nil
}

func (m SmsCouponPagination) Pagination() SmsCouponPaginationBasic {
	return SmsCouponPaginationBasic{
		CurrentPage: m.CurrentPage,
		PageSize:    m.PageSize,
		TotalPage:   m.TotalPage,
		TotalCount:  m.TotalCount,
	}
}

func (m SmsCouponPagination) ToProto(to any, toData any, toPagination any) error {
	if to != nil {
		if err := copier.CopyWithOption(to, m, copier.Option{}); err != nil {
			return err
		}
	}
	if toData != nil {
		if err := copier.Copy(toData, m.Data); err != nil {
			return err
		}
	}
	if toPagination != nil {
		if err := copier.Copy(toPagination, m.Pagination()); err != nil {
			return err
		}
	}
	return nil
}

func (m *defaultSmsCouponModel) Insert(ctx context.Context, data *SmsCoupon) error {
	return m.OrmSession(ctx).Create(data).Error
}

func (m *defaultSmsCouponModel) Update(ctx context.Context, data *SmsCoupon) error {
	if data.Id <= 0 {
		return gorm.ErrMissingWhereClause
	}
	return m.OrmSession(ctx).Where("id = ?", data.Id).Save(data).Error
}
