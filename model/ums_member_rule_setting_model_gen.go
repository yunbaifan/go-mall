// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"math"

	"github.com/jinzhu/copier"
	"gorm.io/gorm"
)

var (
	_ sql.IsolationLevel
)

type (
	umsMemberRuleSettingModel interface {
		Insert(ctx context.Context, data *UmsMemberRuleSetting) error
		FindOne(ctx context.Context, id int64, preloadList ...string) (*UmsMemberRuleSetting, error)
		OrmSession(ctx context.Context) *gorm.DB
		Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error
		FindPageListByBuilder(ormSession *gorm.DB, keyword *KeywordUmsMemberRuleSettingModel) (*UmsMemberRuleSettingPagination, error)
		Update(ctx context.Context, data *UmsMemberRuleSetting) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUmsMemberRuleSettingModel struct {
		table   string
		ormConn *gorm.DB
	}

	UmsMemberRuleSetting struct {
		Id                int64           `json:"id" gorm:"primary_key"`
		ContinueSignDay   sql.NullInt64   `json:"continue_sign_day"`   // 连续签到天数
		ContinueSignPoint sql.NullInt64   `json:"continue_sign_point"` // 连续签到赠送数量
		ConsumePerPoint   sql.NullFloat64 `json:"consume_per_point"`   // 每消费多少元获取1个点
		LowOrderAmount    sql.NullFloat64 `json:"low_order_amount"`    // 最低获取点数的订单金额
		MaxPointPerOrder  sql.NullInt64   `json:"max_point_per_order"` // 每笔订单最高获取点数
		Type              sql.NullInt64   `json:"type"`                // 类型：0->积分规则；1->成长值规则
		UmsMemberRuleSettingRelation
	}

	UmsMemberRuleSettingPagination struct {
		Data []*UmsMemberRuleSetting
		UmsMemberRuleSettingPaginationBasic
	}

	UmsMemberRuleSettingPaginationBasic struct {
		CurrentPage int64
		PageSize    int64
		TotalCount  int64
		TotalPage   int64
	}

	KeywordUmsMemberRuleSettingModel struct {
		KeywordKey     string //like 关键字
		KeywordValue   string //like 值
		Page, PageSize int64
	}
)

func newUmsMemberRuleSettingModel(db *gorm.DB) *defaultUmsMemberRuleSettingModel {
	return &defaultUmsMemberRuleSettingModel{
		table:   "`ums_member_rule_setting`",
		ormConn: db,
	}
}

func (UmsMemberRuleSetting) TableName() string {
	return "`ums_member_rule_setting`"
}

func (m UmsMemberRuleSetting) ToProto(toValue interface{}) error {
	return copier.Copy(toValue, &m)
}

func (m *defaultUmsMemberRuleSettingModel) Delete(ctx context.Context, id int64) error {
	return m.OrmSession(ctx).Delete(&UmsMemberRuleSetting{}, id).Error
}

func (m *defaultUmsMemberRuleSettingModel) FindOne(ctx context.Context, id int64, preloadList ...string) (*UmsMemberRuleSetting, error) {
	var mm UmsMemberRuleSetting
	db := m.OrmSession(ctx)
	for _, preload := range preloadList {
		db = db.Preload(preload)
	}
	err := db.First(&mm, id).Error
	switch err {
	case nil:
		return &mm, nil
	case gorm.ErrRecordNotFound:
		return nil, gorm.ErrRecordNotFound
	default:
		return nil, err
	}
}

func (m *defaultUmsMemberRuleSettingModel) OrmSession(ctx context.Context) *gorm.DB {
	return m.ormConn.Model(&UmsMemberRuleSetting{}).WithContext(ctx)
}

func (m *defaultUmsMemberRuleSettingModel) Transaction(ctx context.Context, fc func(tx *gorm.DB) error, opts ...*sql.TxOptions) error {
	return m.ormConn.WithContext(ctx).Transaction(fc, opts...)
}

func (m *defaultUmsMemberRuleSettingModel) FindPageListByBuilder(db *gorm.DB, keyword *KeywordUmsMemberRuleSettingModel) (*UmsMemberRuleSettingPagination, error) {
	page := keyword.Page
	pageSize := keyword.PageSize
	// 总行数
	var totalCount int64
	if err := db.Count(&totalCount).Error; err != nil {
		return nil, err
	}
	// 总页数
	totalPage := int64(math.Ceil(float64(totalCount) / float64(pageSize)))

	resp := new(UmsMemberRuleSettingPagination)
	resp.PageSize = pageSize
	resp.TotalPage = totalPage
	resp.CurrentPage = page
	resp.TotalCount = totalCount

	// 没有数据则返回空数据
	if totalCount <= 0 {
		return resp, nil
	}
	// 当前页数没有数据也返回空数据
	if totalCount < ((page - 1) * pageSize) {
		return resp, nil
	}
	if keyword.KeywordKey != "" && keyword.KeywordValue != "" {
		db = db.Where(fmt.Sprintf("%s = ?", keyword.KeywordKey), keyword.KeywordValue)
	}
	offset := int((page - 1) * pageSize)
	if err := db.Offset(offset).Limit(int(pageSize)).Find(&resp.Data).Error; err != nil {
		return nil, err
	}

	return resp, nil
}

func (m UmsMemberRuleSettingPagination) Pagination() UmsMemberRuleSettingPaginationBasic {
	return UmsMemberRuleSettingPaginationBasic{
		CurrentPage: m.CurrentPage,
		PageSize:    m.PageSize,
		TotalPage:   m.TotalPage,
		TotalCount:  m.TotalCount,
	}
}

func (m UmsMemberRuleSettingPagination) ToProto(to any, toData any, toPagination any) error {
	if to != nil {
		if err := copier.CopyWithOption(to, m, copier.Option{}); err != nil {
			return err
		}
	}
	if toData != nil {
		if err := copier.Copy(toData, m.Data); err != nil {
			return err
		}
	}
	if toPagination != nil {
		if err := copier.Copy(toPagination, m.Pagination()); err != nil {
			return err
		}
	}
	return nil
}

func (m *defaultUmsMemberRuleSettingModel) Insert(ctx context.Context, data *UmsMemberRuleSetting) error {
	return m.OrmSession(ctx).Create(data).Error
}

func (m *defaultUmsMemberRuleSettingModel) Update(ctx context.Context, data *UmsMemberRuleSetting) error {
	if data.Id <= 0 {
		return gorm.ErrMissingWhereClause
	}
	return m.OrmSession(ctx).Where("id = ?", data.Id).Save(data).Error
}
