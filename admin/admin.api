syntax = "v1"

type Request {
	Name string `path:"name,options=you|me"`
}

import (
	"apis/admin/admin.api"
	"apis/role/role.api"
)

@server (
	prefix: api/v1/admin
	group:  admin
)
service admin-api {
	// 用户登录
	@handler AdminLoginHandler
	post /login (LoginRequest) returns (LoginResponse)
}

@server (
	prefix:     api/v1/admin
	group:      admin
	middleware: JWTAuthToken
)
service admin-api {
	// 获取用户信息
	@handler AdminInfoHandler
	get /info returns (AdminInfo)

	// 用户注册
	@handler AdminRegisterHandler
	post /register (RegisterRequest) returns (RegisterRequest)

	// 用户退出
	@handler AdminLogoutHandler
	post /logout

	// 刷新token
	@handler RefreshTokenHandler // 刷新token
	post /refreshToken returns (LoginResponse)

	@handler AdminListHandler // 获取用户列表
	post /list (AdminListRequest) returns (AdminListResponse)

	@handler AdminGetItemHandler // 获取单个用户信息
	get /:userId (AdminGetItemRequest) returns (AdminResponse)

	@handler AdminRoleUpdateHandler // 更新用户权限
	post /role/update (AdminRoleUpdateRequest) returns (AdminCountResponse)

	@handler AdminRoleListHandler // 获取单用户的权限
	get /role/:adminId (AdminRoleListRequest) returns ([]AdminRoleListResponse)

	@handler AdminUpdateStatusHandler // 更新用户状态
	post /updateStatus/:userId (AdminGetItemRequest) returns (AdminCountResponse)

	@handler AdminDeleteHandler // 删除用户
	post /delete/:userId (AdminGetItemRequest) returns (AdminCountResponse)

	@handler AdminUpdatePasswordHandler // 更新用户密码
	post /updatePassword (UpdatePasswordRequest) returns (AdminCountResponse)
}

@server (
	prefix: api/v1/role
	group:  role
)
service admin-api {
	@handler RoleCreateHandler // 创建角色
	post /create (RoleRequest) returns (RoleCountResponse)

	@handler RoleUpdateHandler // 更新角色
	post /update/roleId (RoleRequest) returns (RoleCountResponse)

	@handler RoleDeleteHandler // 删除角色
	post /delete (RoleDeleteRequest) returns (RoleCountResponse)

	@handler RoleListHandler // 获取角色列表
	get /listAll (RoleListRequest) returns ([]RoleRequest)
}

